/*
* ',' for "or" relationship
* chained '.' for or relationship
* ' ' for descendent ( including grandchild)
* '>' for direct child
* '+' for adjacent sibling
* '~' for sibling
*/


* {
  overflow: visible; 
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  font-size: 1.6vh;


  /*Global Variable*/
  --card-width: 12rem;
  --card-height: 16rem;

}

body {
  font-family: Arial, Helvetica, sans-serif;
  background-color: black;
  overflow: hidden; 
}


.game {
  min-width: calc(100vh * 16/9);
  width: 100vw;
  height: 100vh;
  background-color: rgb(20,20,20);
  position: relative;
  overflow: hidden; 
}



.backgroundIMG {
  height: 48rem;
  width: 27rem;

  /* Force Middle Image*/
  top: 4rem;
  left: 0; 
  right: 0; 
  margin-left: auto; 
  margin-right: auto;
  position: absolute;

  z-index: 0;
}


.stage {
  margin: 3rem;
  height: 35rem;
  width: 100rem;
  background-color: brown;
  
  position: relative;
  z-index: 1;
}


.player {
  margin: 1rem;
  height: 12rem;
  width: 10rem;
  background-color: red;
  

  position: relative;
  z-index: 1;
}




/* For Mirroring */
.mirror {
  -webkit-transform: matrix(-1, 0, 0, 1, 0, 0);
  -moz-transform: matrix(-1, 0, 0, 1, 0, 0);
  -o-transform: matrix(-1, 0, 0, 1, 0, 0);
  transform: matrix(-1, 0, 0, 1, 0, 0);
  font-weight: bold;
}


/*
************* Card-Related-Stuff *******************
*/


.cardSection {
  overflow: visible;
  position: relative;
  width: 100%;
  height: 100%;
  top: 5rem;

  
  display: flex;
  justify-content: center;
  margin: 5rem 0rem;
}


.deck {
  overflow: visible;
  position: relative;
  white-space: nowrap;
  list-style-type: none;

  margin-right: 13rem;
  top: 1rem;

  z-index: 2;  
}


.cardDeckItem {
  position: absolute;
  overflow: visible;

  /* Default, dynamic*/
  top: 0; 
  left: 0;
}



.handDraw {
  height: 18rem;
  width: 120rem;
  
  overflow: visible;
  position: relative;
  white-space: nowrap;
  list-style-type: none;
  z-index: 2;

}



.cardListItem { 
  position: relative;
  overflow: visible;
  display: inline-block;
  color: black;
  z-index: 3;
  
  transition: all 0.3s ease-out;

  /* Dynamic */
  margin: 0rem 0.5rem;   
  left: 0;
  top: 0;
}


.cardListItem:hover {
  z-index: 8;
}



.cardListItem.isInit{
  animation: initCardinHand 0.4s;
}

@keyframes initCardinHand {
  0% { 
    -moz-transform: rotate(-15deg);
    top: 10rem;
    right: 20rem;
    opacity: 0.8;
  }
  65% {
    top: -0.25rem;
    right: 3rem;
    opacity: 1;
  }
  85% {
    top: 0.15rem;
    opacity: 1;
  }
  100% {  
    top: 0rem;
    opacity: 1;
  }
}




.card {
  width: var(--card-width);
  height: var(--card-height);
  perspective: 100rem;
  border-radius: 0.5rem;
  overflow: visible;
  position: relative;
}


.cardInner {
  width: 100%;
  height: 100%;
  overflow: visible;
  position: relative;

  transition: transform 0.4s;
  transform-style: preserve-3d;
}


.cardInner.isFlipped {
  transform: rotateY(180deg);
}


.frontCard, .rearCard {
  border: solid 0.2rem darkorange;
  box-shadow: 0 0 0.3rem 0 darkorange;
  width: 100%;
  height: 100%;
  border-radius: 0.5rem;
  position: absolute;  /* Force two card stacking */

  /* No back shown, therefore rearCard won't block frontCard when idle
  since it's initialized to be rotated by 180deg  */
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
  -moz-backface-visibility: hidden;

  transition: transform 0.25s ease-out,
              border 0.4s ease-out;
}


.frontCard {
  background-color: aqua;
}

.rearCard {
  background-color: brown; 
  transform: rotateY(180deg); 
}


.frontCard.hoverableCard:hover {
  transform: scale(1.6);
  border: 0.1rem solid yellow;
  box-shadow: 0 0 0.5rem 0.3rem yellow;  
}



/*
************* UI-Related-Stuff *******************
*/
.appBar {
  float: right;
  color: white;
}

.appBar li {
  list-style: none;
  float: left;
  margin: 0.5rem 0.5rem;
  font-size: 1rem;
}


.statusBar {
  position: relative;
  overflow: hidden;
  float: left;
  width: 100%;
}

.statusBar ul {
  list-style-type: none;
  text-align:center;
  
  clear: left;
  float: left;
  left: 50%;
  position: relative;
}

.statusBar ul li {
  display: block;
  float: left;
  position: relative;
  right: 50%;

  margin: 0rem 1rem;

  color: white;
  text-shadow: -0.1rem 0 black, 0 0.1rem black, 0.1rem 0 black, 0 -0.1rem black;
  font-size: 1.4rem;
}

.modalWindow {
  z-index: 10;
  background-color: lightgreen;
  border-radius: 1rem;

  position: absolute;
  top: 4rem;
  left: 4rem;
  right: 4rem;
  bottom: 4rem;
}

.overlay {
  z-index: 9;
  background-color: rgba(20, 20, 20, 0.8);

  /* Full Screen */
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;  
}


:global(.ReactModal__Overlay) {
  opacity: 0;
  transform: translateY(-10rem);
  transition: all 300ms ease-out;
}

:global(.ReactModal__Overlay--after-open){
  transform: translateY(0);
  opacity: 1;
}

:global(.ReactModal__Overlay--before-close){
  transform: translateY(-10rem);
  opacity: 0;
}

