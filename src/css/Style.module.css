/*
* ',' for "or" relationship
* chained '.' for or relationship
* ' ' for descendent ( including grandchild)
* '>' for direct child
* '+' for adjacent sibling
* '~' for sibling
*/


* {
  overflow: visible; 
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  font-size: 1.6vmin;
  list-style-type: none;
  font-family: Arial, Helvetica, sans-serif;
  user-select: none;

  /*Global Variable*/
  --bar-height: 7vmin;
  --card-width: min(12rem, 12vw);
  --card-height: min(16rem, 16vw);
  --stage-height: min(36rem, 32vw);
  --stage-width: min(100rem, 90vw);
  --map-row: 4;
  --map-column: 5;
}



@media only screen and (orientation: portrait ) {
  * {
    font-size: 2.1vmin;
    --card-width: max(12rem, 21vw);
    --card-height: max(16rem, 28vw);
    --stage-width: max(36rem, 85vw);
    --stage-height: min(100rem, 60vh);
  }

  .cardListItem:nth-child(4n) {
    page-break-after: always;
    break-after: always;
  }
}


html, body {
  overflow: hidden;
}

body {
  position: relative;
}


.game {
  /* min-width: calc(100vh * 16/9); */
  width: 100vw;
  height: 100vh;
  background-color: lightblue;
  overflow: hidden; 
}



.snowParticle, .laserParticle{
  z-index: 0;
  position: absolute;
}


.snowParticle {
  border-radius: 50%;
  background-color: whitesmoke;
  height: 3rem;
  width: 3rem;
}


.laserParticle{
  height: 100vh;
  width: 3rem;
  background-color: whitesmoke;
}



.stage {
  margin: 6rem 0rem;
  height: calc( var(--stage-height) + 1rem);
  width: var(--stage-width);
}



.gameMap {
  position: relative;
  height: 100%;
  width: 100%;
  z-index: 1;
  
  transform: perspective(150rem) rotateX(10deg);
  box-shadow: 0 12.5px 100px -10px rgba(50, 50, 73, 0.4), 0 10px 10px -10px rgba(50, 50, 73, 0.3);
  border-radius: 2.0rem;
  background:  
  white
  linear-gradient(rgba(0,0,0, 0.1),rgba(0,0,0, 0.1)) 50% 100%/calc(100% - 1rem) 1rem; 
  background-repeat: no-repeat;  

  transition: box-shadow 0.3s ease-out;
}




.tileMap {
  position: absolute;
  height: 95%;
  width: 100%;
}


.floorUnit {
  position: relative;
  z-index: 2;
  float: left; 
  background-color: lightblue;
  border-radius: 1rem;
  border: solid white 0.3rem;
  box-shadow: 0 12.5px 100px -10px rgba(50, 50, 73, 0.1), 0 10px 10px -10px rgba(50, 50, 73, 0.25);
  height: calc( 100% / var(--map-row) );
  width: calc(  100% / var(--map-column) );

  transition: background-color 0.25s ease-out;
}



/* For Mirroring */
.mirror {
  -webkit-transform: matrix(-1, 0, 0, 1, 0, 0);
  -moz-transform: matrix(-1, 0, 0, 1, 0, 0);
  -o-transform: matrix(-1, 0, 0, 1, 0, 0);
  transform: matrix(-1, 0, 0, 1, 0, 0);
  font-weight: bold;
}



/*
************* Entity-Related-Stuff *******************
*/
.effect {
  position: absolute;
  z-index: 50;
  top: -2rem;
  left: 25%;

  width: 8rem;
  height: 8rem;
  pointer-events: none;

  transform: none;
  -moz-transform: none;
  -webkit-transform: none;
  -o-transform: none;
}


.stageObject {
  position: relative;
  z-index: 20;
  top: -2rem;
  
  width: 8rem;
  height: 8rem;
}


.stageImage, .stageParticle {
  width: 100%;
  height: 100%;
  object-fit: contain;
}


.stageImage {
  -webkit-filter: drop-shadow(0.2rem 0.2rem 0 white)
  drop-shadow(-0.2rem 0.2rem 0 white)
  drop-shadow(0.2rem -0.2rem 0 white)
  drop-shadow(-0.2rem -0.2rem 0 white);

  filter: drop-shadow(0.2rem 0.2rem 0 white)
  drop-shadow(-0.2rem 0.2rem 0 white)
  drop-shadow(0.2rem -0.2rem 0 white)
  drop-shadow(-0.2rem -0.2rem 0 white);
}



.attackableEntity {
  width: 100%;
  height: 100%;
  object-fit: contain;

  -webkit-filter: drop-shadow(0.2rem 0.2rem 0 lightcoral)
  drop-shadow(-0.2rem 0.2rem 0 lightcoral)
  drop-shadow(0.2rem -0.2rem 0 lightcoral)
  drop-shadow(-0.2rem -0.2rem 0 lightcoral);

  filter: drop-shadow(0.2rem 0.2rem 0 lightcoral)
  drop-shadow(-0.2rem 0.2rem 0 lightcoral)
  drop-shadow(0.2rem -0.2rem 0 lightcoral)
  drop-shadow(-0.2rem -0.2rem 0 lightcoral);
}




/*
************* Card-Related-Stuff *******************
*/


.cardSection {
  overflow: visible;
  position: absolute;
  width: 100vw;
  bottom: 0;
  

  /* Flex */
  display: flex;
  justify-content: center;
}


@media only screen and (orientation: portrait){
  .cardSection {
    bottom: calc(var(--card-height) * -1 ); 
  }
}


.deck {
  overflow: visible;
  position: relative;
  white-space: nowrap;
  top: 1rem;
  z-index: 2;  
}



.cardDeckItem {
  position: absolute;
  overflow: visible;
  /* Default, dynamic*/
  top: 0; 
  left: 0;
}



.handDraw {
  overflow: visible;
  width: 100%;
  z-index: 2;
  
  display: flex;
  justify-content: center;
  flex-direction: row;
  flex-wrap: wrap;
}




.cardListItem { 
  position: relative;
  overflow: visible;
  display: inline-block;
  color: black;
  z-index: 3;
  
  transition: all 0.3s ease-out;

  /* Dynamic */
  margin: 0rem 0rem;   
  left: 0;
  top: 0;
}




.card {
  width: var(--card-width);
  height: var(--card-height);
  perspective: 100rem;
  border-radius: 0.5rem;
  overflow: visible;
  position: relative;
  
  transition: transform 0.3s ease-out;
}



.cardInner {
  width: 100%;
  height: 100%;
  overflow: visible;
  position: relative;

  transition: transform 0.4s;
  transform-style: preserve-3d;
}


.cardInner.isFlipped {
  transform: rotateY(180deg);
}


.frontCard, .rearCard {
  border: solid 0.4rem lightgoldenrodyellow;
  box-shadow: 0rem 0 0.3rem 0 lightcoral;

  width: 100%;
  height: 100%;
  border-radius: 0.5rem;
  position: absolute;  /* Force two card stacking */

  /* No back shown, therefore rearCard won't block frontCard when idle
  since it's initialized to be rotated by 180deg  */
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
  -moz-backface-visibility: hidden;

  transition: transform 0.25s ease-out,
              border 0.4s ease-out;
}



.frontCard {
  background-color: moccasin;
}

.rearCard {
  background-color: brown; 
  transform: rotateY(180deg); 
}




/*
************* UI-Related-Stuff *******************
*/


.mainMenu {
  position: absolute;
  top: 25%;
  right: 25%;
  left: 25%;
  bottom: 25%;
}


.mainMenuItem {
  margin: 1rem;
  color: white;
  font-size: 3.5rem;
}



.topSection {
  position: relative;
  top: 0.5rem;
  width: 97%;
}



.appBar li {
  float: right;
  margin: 0.5rem;
  font-size: 1.2rem;
  color: white;
}



.statusBar {
  position: absolute;
  top: 0rem;
  left: 0rem;
}



.statusParallelogram {
  width: 7rem;
	height: 2.8rem;
	transform: skew(20deg);
  background-color: transparent;
  border: solid 0.2rem white;
  display: inline-block;
  overflow: hidden;
}


.healthBarParallelogram {
  width: 20rem;
  height: 1.7rem;
  transform: skew(20deg);
  background-color: transparent;
  border: solid 0.15rem white;
  display: inline-block;
}


.healthBarFill{
  height:100%;
  width: 100%;         /*dynamic*/
  position:absolute;
  top:0;
  left:0;
  display:block;
  background-color: white;
 
}



.statusParallelogram * {
  transform: skew(-20deg);
  color: white;
}



.modalWindow {
  z-index: 10;
  background-color: lightblue;
  border-radius: 1rem;

  position: absolute;
  top: 4rem;
  left: 4rem;
  right: 4rem;
  bottom: 4rem;
}

.overlay {
  z-index: 9;
  background-color: rgba(20, 20, 20, 0.8);

  /* Full Screen */
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;  
}


:global(.ReactModal__Overlay) {
  opacity: 0;
  transform: translateY(-10rem);
  transition: all 300ms ease-out;
}

:global(.ReactModal__Overlay--after-open){
  transform: translateY(0);
  opacity: 1;
}

:global(.ReactModal__Overlay--before-close){
  transform: translateY(-10rem);
  opacity: 0;
}


.turnButton {
  position: relative;
  left: calc(var(--stage-width)/2 - 1rem);
  top: -10rem;
  z-index: 5;

  background-color: rgba(250, 250, 250, 1);
  border-radius: 50%;

  /** dynamic */
  height: 0rem;
  width: 0rem;
}


.clickableCircle {
  height: 4rem;
  width: 4.5rem;
  background-color: rgba(240, 240, 240, 1);
  border-radius: 50%;
  animation: pulse 2s infinite;
}



@keyframes pulse {
	0% {
		transform: rotateX(-50deg) scale(0.95);
		box-shadow: 0 0 0 0 rgba(240, 240, 240, 0.7);
	}
	70% {
		transform: rotateX(-50deg) scale(1);
		box-shadow: 0 0 0 1rem rgba(0, 0, 0, 0);
	}
	100% {
		transform: rotateX(-50deg) scale(0.95);
		box-shadow: 0 0 0 0.5rem rgba(0, 0, 0, 0);
	}
}
